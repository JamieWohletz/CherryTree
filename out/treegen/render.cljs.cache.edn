;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name treegen.render, :imports nil, :requires {treegen.util treegen.util}, :uses {floor treegen.util, ceil treegen.util}, :defs {cherry-blossom-image {:name treegen.render/cherry-blossom-image, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 33, :column 1, :end-line 33, :end-column 26, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 33, :column 6, :end-line 33, :end-column 26}}, BLOSSOM_SIZE {:name treegen.render/BLOSSOM_SIZE, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 21, :column 1, :end-line 21, :end-column 18, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 21, :column 6, :end-line 21, :end-column 18}}, win-width {:name treegen.render/win-width, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 16, :column 1, :end-line 16, :end-column 15, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 16, :column 6, :end-line 16, :end-column 15}}, get-branch-x-pos-on-parent {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 42, :column 7, :end-line 42, :end-column 33, :arglists (quote ([node {:keys [children], :as parent} order-in-siblings])), :doc "Determine where a branch should be rendered on the horizontal plane defined by the top of it's parent's branch"}, :name treegen.render/get-branch-x-pos-on-parent, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 33, :method-params ([node p__5786 order-in-siblings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node {:keys [children], :as parent} order-in-siblings])), :doc "Determine where a branch should be rendered on the horizontal plane defined by the top of it's parent's branch"}, canvas-w {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 13, :column 7, :end-line 13, :end-column 15, :arglists (quote ([]))}, :name treegen.render/canvas-w, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, jquery {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([selector])), :doc "Wrap an element or selector in $(...)"}, :name treegen.render/jquery, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 13, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector])), :doc "Wrap an element or selector in $(...)"}, canvas-h {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 14, :column 7, :end-line 14, :end-column 15, :arglists (quote ([]))}, :name treegen.render/canvas-h, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, canvas {:name treegen.render/canvas, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 12, :column 1, :end-line 12, :end-column 12, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 12, :column 6, :end-line 12, :end-column 12}}, scale-tree {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 37, :column 7, :end-line 37, :end-column 17, :arglists (quote ([{:keys [children length thickness], :as node}]))}, :name treegen.render/scale-tree, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 17, :method-params ([p__5781]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [children length thickness], :as node}]))}, Y_SCALE {:name treegen.render/Y_SCALE, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 20, :column 1, :end-line 20, :end-column 13, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 20, :column 6, :end-line 20, :end-column 13}}, draw-tree {:protocol-inline nil, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 55, :column 7, :end-line 55, :end-column 16, :arglists (quote ([node] [{:keys [thickness length children], :as node} parent order-in-siblings])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [{:keys [thickness length children], :as node} parent order-in-siblings]), :arglists ([node] [{:keys [thickness length children], :as node} parent order-in-siblings]), :arglists-meta (nil nil)}}, :name treegen.render/draw-tree, :variadic false, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([node] [{:keys [thickness length children], :as node} parent order-in-siblings]), :arglists ([node] [{:keys [thickness length children], :as node} parent order-in-siblings]), :arglists-meta (nil nil)}, :method-params ([node] [{:keys [thickness length children], :as node} parent order-in-siblings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 3, :fn-var true, :arglists ([node] [{:keys [thickness length children], :as node} parent order-in-siblings])}, context {:name treegen.render/context, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 15, :column 1, :end-line 15, :end-column 13, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 15, :column 6, :end-line 15, :end-column 13}}, win-height {:name treegen.render/win-height, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 17, :column 1, :end-line 17, :end-column 16, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 17, :column 6, :end-line 17, :end-column 16}}, X_SCALE {:name treegen.render/X_SCALE, :file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 19, :column 1, :end-line 19, :end-column 13, :meta {:file "C:\\Users\\Jamie Wohletz\\Documents\\Code\\CherryTree\\app\\scripts\\treegen\\render.cljs", :line 19, :column 6, :end-line 19, :end-column 13}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:children :thickness :angle :length}, :order [:children :length :thickness :angle]}, :doc nil}